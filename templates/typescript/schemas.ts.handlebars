{{!top level schemas}}
{{#each components.schemas}}
{{#if (and? @root.generateEnums (eq? type "string") enum)}}export enum {{{schemaRefToTypeName @key}}} {
{{#each enum}}
  {{.}} = {{value this "string"}},
{{/each}}
}
{{else}}{{#if (or? (eq? type "object") (eq? type undefined))}}export interface {{{schemaRefToTypeName @key}}} {{> schema}}
{{else}}export type {{{schemaRefToTypeName @key}}} = {{> schema}};
{{/if}}{{/if}}
{{/each}}

{{#if components.securitySchemes}}
export interface SecurityOptions {
  {{#each components.securitySchemes}}
  {{@key}}?: SecurityOptions.{{schemaRefToTypeName @key}};
  {{/each}}
}

export namespace SecurityOptions {
  {{#each components.securitySchemes}}
  export interface {{schemaRefToTypeName @key}} {{#with (deref . @root)}}{{#switch type}}
    {{~#case "apiKey"}}{ key: string }{{/case}}
    {{~#case "http"}}{{#switch scheme}}
      {{~#case "bearer"}}{ token: string }{{/case}}
      {{~#case "basic"}}{ login: string, password: string }{{/case}}
    {{~else}}{} /* {{type}} not supported */
    {{~/switch}}{{/case}}
  {{~/switch}}{{#with description}} // {{this}}{{/with}}{{/with}}
  {{/each}}
}
{{/if}}
